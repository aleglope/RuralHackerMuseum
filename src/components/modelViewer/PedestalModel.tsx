"use client";

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { GroupProps } from "@react-three/fiber";

// Type definition for the GLTF model structure
// Generated by gltfjsx, then manually checked/adjusted
type GLTFResult = GLTF & {
  nodes: {
    Pedestal_pedestal_blinn_0: THREE.Mesh;
  };
  materials: {
    pedestal_blinn: THREE.MeshStandardMaterial;
  };
};

interface PedestalModelProps extends GroupProps {
  modelScale?: number | [number, number, number]; // Optional scale for the pedestal model itself
}

export function PedestalModel(props: PedestalModelProps) {
  const { nodes, materials } = useGLTF("/models/pedestal.gltf") as GLTFResult;

  const { modelScale, ...groupProps } = props;

  // Set a default scale if no modelScale prop is provided.
  // This internal scale is applied to the <group> holding the mesh.
  const internalScale = modelScale || 0.2;

  return (
    // The main group can be positioned, rotated, etc., via props passed to groupProps
    <group {...groupProps} dispose={null}>
      {/* This inner group handles the pedestal's own scaling */}
      <group scale={internalScale}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Pedestal_pedestal_blinn_0.geometry}
          material={materials.pedestal_blinn}
        />
      </group>
    </group>
  );
}

// Preload the model for faster initial rendering
useGLTF.preload("/models/pedestal.gltf");
